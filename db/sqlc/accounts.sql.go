// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: accounts.sql

package db

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
insert into accounts(
    user_name,
    full_name,
    hash_password,
    email
)VALUES(
    $1,$2,$3,$4
)RETURNING user_name, full_name, hash_password, email, created_at
`

type CreateAccountParams struct {
	UserName     string `json:"user_name"`
	FullName     string `json:"full_name"`
	HashPassword string `json:"hash_password"`
	Email        string `json:"email"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, createAccount,
		arg.UserName,
		arg.FullName,
		arg.HashPassword,
		arg.Email,
	)
	var i Account
	err := row.Scan(
		&i.UserName,
		&i.FullName,
		&i.HashPassword,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAccount = `-- name: DeleteAccount :exec
delete from accounts
where user_name=$1
`

func (q *Queries) DeleteAccount(ctx context.Context, userName string) error {
	_, err := q.db.ExecContext(ctx, deleteAccount, userName)
	return err
}

const getAccount = `-- name: GetAccount :one
select user_name, full_name, hash_password, email, created_at from accounts
where user_name=$1 limit 1
`

func (q *Queries) GetAccount(ctx context.Context, userName string) (Account, error) {
	row := q.db.QueryRowContext(ctx, getAccount, userName)
	var i Account
	err := row.Scan(
		&i.UserName,
		&i.FullName,
		&i.HashPassword,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const updateAccount = `-- name: UpdateAccount :one
update accounts
set hash_password = $2
where user_name=$1
RETURNING user_name, full_name, hash_password, email, created_at
`

type UpdateAccountParams struct {
	UserName     string `json:"user_name"`
	HashPassword string `json:"hash_password"`
}

func (q *Queries) UpdateAccount(ctx context.Context, arg UpdateAccountParams) (Account, error) {
	row := q.db.QueryRowContext(ctx, updateAccount, arg.UserName, arg.HashPassword)
	var i Account
	err := row.Scan(
		&i.UserName,
		&i.FullName,
		&i.HashPassword,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}
